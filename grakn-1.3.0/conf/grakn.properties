#
# GRAKN.AI - THE KNOWLEDGE GRAPH
# Copyright (C) 2018 Grakn Labs Ltd
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#

############################# Knowledge Base Configuration #############################

# Determines how Grakn is initialised. The possible options are:
#
# - in-memory: This creates only in-memory Grakn knowledge bases. This is useful for experimentation and testing
#              Some features such as transaction handling and post processing are disable in this mode
# - production: This created Grakn knowledge base which are persisted to disk and are feature complete.
knowledge-base.mode=production

# Determines how the analytics component of Grakn is initialed. The options are:
#
# - in-memory: This runs analytics on a single machine in-memory. It does not distribute any computation.
#              This is useful for experimentation and testing
# - distributed: This runs analytics in a distributed mode. It distributes computations across the Grakn cluster
knowledge-base.analytics=distributed

# The name of the default knowledge base keyspace.
knowledge-base.default-keyspace=grakn

# Number of instances after which Grakn should shard any type node. Sharding is the
# mechanism by which Grakn mitigates against supernodes.
# A larger sharding threshold will increase runtime as the knowledge base  grows and decrease
# the likelihood of supernodes. A threshold that is too small will create supernodes
# more frequently.
knowledge-base.sharding-threshold=10000

# How long, in milliseconds, knowledge base-level schema elements will be
# cached. Longer cache timeouts means writing will be much faster, particularly for
# batch loading. Shorter cache timeouts are better for memory usage and in some cases
# may help avoid GC issues.
knowledge-base.schema-cache-timeout-ms=600000

############################# Server Configuration #############################

# Directory in which server data will be stored
data-dir=db/

# Set the IP address that Grakn engine server will listen on.
server.host=0.0.0.0
# Port number to use for Grakn engine server to listen on. If provided port = 0
# then an arbitrary available port will be used
server.port=4567
# Set the external folder serving static files to the Grakn dashboard.
server.static-file-dir=./services/assets/


# This defines the number of threads to be used when executing tasks. Consider
# increasing this number to increase engine task throughput and CPU usage.
# If the provided number of threads = 0 then the number of processors available to
# the Java virtual machine at startup time will be used.
loader.threads=4

# The max number of threads in Spark's thread pool
webserver.threads=64

# How many threads to dedicate to background processes
# This will determine how many background processes such as post processing can run concurrently
background-tasks.threads=1

# How many threads are dedicated to post processing.
# The more threads the faster consistency is achieved.
# However too many threads and post processing can affect normal loading times.
post-processor.pool-size=32

# The amount of time to delay post processing this is to give time to finalise internal indices
post-processor.delay=300

# Port number to use for gRPC server to listen on
grpc.port=48555

############################# Logging Configuration #############################
# These properties are read directly by logback.xml

# Single directory under which to store log files. If using a relative path it will be relative
# to the JVM system variable "grakn.dir"
log.dirs=./logs/
# Specify the log verbosity level. This can be one of:
#
# ERROR: (critical errors indicating the application has failed)
# WARN:  (errors that will not affect the overall running of the application)
# INFO:  (minimally verbose, including Grakn engine lifecycle events)
# DEBUG: (verbose, non production use, server task lifecycle events)
# TRACE: (extraordinarily verbose, be brave, including graql query traversal paths,
#         extra task lifecycle events, kafka consumer offsets, etc)
log.level=INFO

############################# Persisted Knowledge Base Configuration #############################
# The type of backend persistence. Options are:
# - grakn-production: The knowledge base it stored locally
storage.backend=grakn-production
# The hostname or comma-separated list of hostnames of storage backend servers
storage.hostname=127.0.0.1
# Timeout in milliseconds when connecting to storage backend
storage.connection-timeout=20000

# Whether to enable the database-level cache, which is shared across all transactions.
# Enabling this option speeds up traversals by holding hot elements in memory,
# but also increases the likelihood of reading stale data. Disabling it forces each transaction
# to independently fetch elements from storage before reading/writing them.
cache.db-cache=false
# How long in milliseconds database-level cache will keep entries after flushing them.
cache.db-cache-clean-wait=20
# Default expiration time in milliseconds for entries in the database-level cache.
# Set to 0 to disable expiration (cache entries live forever or until memory pressure
# triggers eviction).
cache.db-cache-time=180000
# Size of Janus's database cache in proportion to JVM size 0 (small) to 1 (large)
cache.db-cache-size=0.25


############################# Redis Configuration #############################
# IP or hostname on which Redis is listening for connections.
queue.host=localhost:6379
queue.pool-size=32
queue.sentinel.master=graknmaster
queue.sentinel.host=
